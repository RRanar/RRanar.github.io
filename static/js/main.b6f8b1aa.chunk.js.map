{"version":3,"sources":["EmployeesBirthdayBlock.js","EmployeeCard.js","EmployeesList.js","App.js","index.js"],"names":["EmployeesBirthdayBlock","props","activeEmployees","months","config","MONTHS_MAP","style","width","maxWidth","length","Object","keys","map","month","filtredByMonth","filter","ele","Date","dob","getMonth","activeEmployeesByMonth","employee","lastName","firstName","EmployeeCard","isActive","changeEmployeeActivate","id","className","display","flexDirection","color","htmlFor","type","checked","value","onChange","EmployeesList","items","refresh","alphabet","ORDER_BY_ALPHABET","split","letterCss","minWidth","textAlign","changeEmployeeActive","e","val","target","employeeId","replace","justifyContent","paddingLeft","overflow","letter","filtredByLeter","charAt","employeesByLeter","App","useState","employees","setEmployees","loading","setLoading","error","setError","useEffect","localStorage","fetch","EMPLOYEES_DATA_URL","then","response","json","data","dataToSave","setItem","JSON","stringify","employeesData","parse","message","newState","newEmployees","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b6f8b1aa.chunk.js","sourcesContent":["import config from './config.json';\n\nexport const EmployeesBirthdayBlock = (props) => {\n    const { activeEmployees } = props;\n    const months = config.MONTHS_MAP;\n\n    return (\n        <div style={{\n            width: '250px',\n            maxWidth: '250px'\n        }}>\n            <h1>EmployeesBirthdayBlock</h1>\n            <div>\n                {\n                    activeEmployees && activeEmployees.length > 0 ? \n                    Object.keys(months).map(month => {\n                        const filtredByMonth = activeEmployees.filter(ele => {\n                            const bthDate = new Date(ele.dob);\n                            return bthDate.getMonth() === months[month] - 1;\n                        });\n\n                        const activeEmployeesByMonth = filtredByMonth.length > 0 ? filtredByMonth.map(employee => {\n                            return (\n                                <div>\n                                    <h3>{`${employee.lastName} ${employee.firstName}`}</h3>\n                                </div>\n                            );\n                        }) : [];\n\n                        return activeEmployeesByMonth.length > 0 ? (\n                            <div>\n                                <h2>{month}</h2>\n                                {activeEmployeesByMonth}\n                            </div>\n                        ) : '';\n                    }) \n                    : (<h1>List is empty</h1>)\n                }\n            </div>\n        </div>\n    );\n};","export const EmployeeCard = (props) => {\n    const {lastName, firstName, isActive, changeEmployeeActivate , id } = props;\n    \n    return (\n        <div className=\"employee-card\" style={{width: '15em', display: 'flex', flexDirection: 'column'}}>\n            <h2 style={isActive ? {color: 'blue'} : {color: 'black'}}>\n                { `${lastName} ${firstName}` }\n            </h2>\n            <label htmlFor=\"active\">\n                active\n            </label>\n            <input \n                type = \"radio\" \n                checked = { isActive } \n                value = \"active\"\n                onChange = { changeEmployeeActivate }\n                id = {`active-${id}`}\n                />\n            <br />\n            <label htmlFor=\"nonactive\">\n                nonactive\n            </label>\n            <input \n                type = \"radio\" \n                checked = { !isActive  } \n                value = \"nonactive\"\n                onChange = { changeEmployeeActivate }\n                id = {`nonactive-${id}`}\n                />\n        </div>\n    );\n}","import React from 'react';\nimport { EmployeeCard } from './EmployeeCard';\nimport config from './config.json';\n\nexport const EmployeesList = (props) => {\n    const { items, refresh } = props;\n    const alphabet = config.ORDER_BY_ALPHABET.split('');\n    const letterCss = { \n        minWidth: '200px',\n        width: '200px',\n        display: 'flex',\n        flexDirection: 'column',\n        textAlign: 'center'\n    };\n\n    const changeEmployeeActive= (e) => {\n        const val = e.target.value === 'active' ? true : false;\n        const employeeId = e.target.id.replace(`${e.target.value}-`, '');\n        refresh(employeeId, val);\n    };\n\n\n    return (\n       <div>\n            <h1>EmployeesList</h1>\n        <div className='employees-list' style={{ \n            display: 'flex',\n            justifyContent: 'space-beetwen',\n            paddingLeft: '20px',\n            overflow: 'scroll',\n            width: '800px',\n            maxWidth: '800px'\n            }}>\n            {\n                items ? alphabet.map(letter => {\n                    const filtredByLeter = items.filter(ele =>  ele.lastName.charAt(0) === letter);\n                    const employeesByLeter = filtredByLeter && filtredByLeter.length > 0 ? filtredByLeter.map(employee => {\n                        return (\n                            <EmployeeCard \n                                lastName={employee.lastName} \n                                firstName={employee.firstName}\n                                key={employee.id}\n                                id = {employee.id}\n                                isActive = { employee.isActive }  \n                                changeEmployeeActivate = {changeEmployeeActive}\n                            />\n                        );\n                    }) : [];\n\n                    return employeesByLeter && employeesByLeter.length > 0 ? (\n                        <div style={{\n                            minWidth: '250px',\n                            width: '250px'\n                        }}\n                            key={letter}\n                        >\n                            <h2>{letter}</h2>\n                            { employeesByLeter }\n                        </div>\n                    ) : (\n                        <div style={letterCss}\n                            key={letter}\n                        >\n                            <h2>{letter}</h2>\n                            <h2>---</h2>\n                        </div>\n                    )\n                }) : <h1>List is empty</h1>\n            }\n        </div>\n       </div>\n    );\n};"," import React, { useEffect, useState } from 'react';\n import config from './config.json';\nimport { EmployeesBirthdayBlock } from './EmployeesBirthdayBlock';\n import { EmployeesList } from './EmployeesList';\n \n export const App = () => {\n\n    const [employees, setEmployees] = useState(null);\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(null);\n    \n    useEffect(() => {\n      if (!localStorage.employees) {\n        setLoading(true);\n        fetch(config.EMPLOYEES_DATA_URL).then(response => response.json())\n        .then(\n          data => {\n            const dataToSave = data.map(ele => {\n              return {\n                  id : ele.id,\n                  firstName: ele.firstName,\n                  lastName: ele.lastName,\n                  dob: ele.dob,\n                  isActive : false\n                };\n            });\n            localStorage.setItem('employees', JSON.stringify(dataToSave));\n            setLoading(false);\n          }, error => {\n            setError(error);\n            setLoading(false);\n          });\n      }\n\n      const employeesData = JSON.parse(localStorage.employees);\n      setEmployees(employeesData);\n      setLoading(false);\n    }, [setEmployees, setError, setLoading]);\n\n    const refreshEmployees = (id, newState) => {\n       const newEmployees = employees.map(ele => {\n            return ele.id === id ? {\n              id : ele.id,\n              firstName: ele.firstName,\n              lastName: ele.lastName,\n              dob: ele.dob,\n              isActive : newState\n            } : {\n              id : ele.id,\n              firstName: ele.firstName,\n              lastName: ele.lastName,\n              dob: ele.dob,\n              isActive : ele.isActive\n            }\n        });\n\n        localStorage.setItem('employees', JSON.stringify(newEmployees));\n        setEmployees(JSON.parse(localStorage['employees']));\n    };\n\n  return (\n    <div className='container' style={{\n      display: 'flex'\n    }}>\n      {\n        loading ? \n        <h1>Loading...</h1> \n        : error ? \n        <h1>Error: {error.message}</h1> \n        : <EmployeesList \n            items={employees}\n            refresh = {refreshEmployees}\n            />\n      }\n      <EmployeesBirthdayBlock  activeEmployees = {employees ? employees.filter(ele => ele.isActive ): []}/>\n    </div>\n  );\n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {App} from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}